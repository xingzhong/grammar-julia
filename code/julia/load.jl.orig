# julia script
include("loader.jl")
include("Grammar.jl")
include("Inside.jl")

fileName = "../../sample/P3_2_8_p02.csv"
#fileName = "../../sample/P1_1_12_p19.csv"
println("\nloading data "*fileName)
frame = DataMS(fileName)

<<<<<<< HEAD
TEST = frame.ob[150:200, :, 7] # 119
#TEST = Observations[120:155, :, 7] # 128
=======
println("\nloading data")
Observations = mapslices(diff, feature, 1)
#show(Observations)
println()
TEST = Observations[150:200, :, 7] # 119
#TEST = Observations[1:155, :, 7] # 128
>>>>>>> optimize
#show(TEST)
grammar = "./circle.cnf"
#grammar = "./multi_circle.cnf"
A, B, S = loadGrammar(grammar)
<<<<<<< HEAD
println("CYK parsing"*grammar)
Gamma, Tau = CYK(TEST, A, B)

println("Parsing Tree")
loglik = buildTree(Tau, S, TEST)
println(loglik)
println()

=======
#Gamma, Tau = CYK(TEST, A, B)
GT = CYK(TEST, A, B)
#println("Final Gamma")
#debug_SortDict(Gamma)
#println("Final Tau")
#for t in GT
#    println(t)
#end
println("parse")
#loglik = buildTree(Tau, S, TEST)
loglik = buildTree(GT, S, TEST)
println(loglik)
println()

#p1 = FramedPlot()
#p2 = FramedPlot()
#p3 = FramedPlot()
#p = Table(3,1)
#add( p1, Curve(1:size(TEST,1), TEST[:,1,1]))
#add( p2, Curve(1:size(TEST,1), TEST[:,2,1]))
#add( p3, Curve(1:size(TEST,1), TEST[:,3,1]))
#p[1,1] = p1
#p[2,1] = p2
#p[3,1] = p3
#file(p, "test.png")
>>>>>>> optimize
